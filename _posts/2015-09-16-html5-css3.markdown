---
layout:     post
title:      "HTML5 and CSS3 notes"
subtitle:   "Memo of HTML5 and CSS3"
date:       2015-09-16 12:00:00
author:     "tientm"
header-img: "img/html4.jpg"
---

# Overview & Update

# HTML5 Elements

# HTML5 Forms

# CSS3 Styles

## Border Radius

The border-radius property applies rounded corners to borders.

~~~ css
border-radius: <top left> <top right> <bottom right> <bottom left>
~~~

Example:

~~~
.box {
  border-radius: 4px 15px 12px 10px;
}
~~~

You can also specify the border-radius value in percentages.

~~~
.box {
  border-radius: 50%;
}
~~~

## Box Shadow
The box-shadow property specifies a shadow on an element.

~~~
box-shadow: <inset> <offset-x> <offset-y> <blur-radius> <spread-radius> <color>
~~~

- *inset:* Optional. If it is not specified,  it will be set to default value is "drop shadow" rather than "inset shadown".
- *offset-x:* The shadow offset x value, which is going to move the shadow along x-axis to left or right. If offset-x is positive, move to right. Otherwise move to left.
- *offset-y:* The shadow offset y value, which is going to move the shadow along y-axis up or down. If offset-x is positive, move down. Otherwise move up.
- *blur-radius:* Optional. It alters the blur amount of the shadow, causing it to become bigger or lighter with a large value. Default is the size of the element.
- *spread-radius:* Optional. Causes the shadow to shrink or expand.
- *color:* The color of shadow.

~~~
box-shadow: 1px 2px 0 2px #000;
// inset is missing, so it will be set to default is drop shadow. 1px of offset-x, 2px of offset-y, 0px of blur-radius, 2px or spread-radius, #000 for the color of drop shadow.
box-shadow: 1px 2px 2px #000;
// blur-radius is 2px while spread radius is 0.
~~~

Example of using inset:

~~~
box-shadow: inset 1px 2px 2px blue;
// inset is shadow which dropping into inside element
~~~

## Text Shadow
It is really similar to box-shadow but it applies the shadow to text, as the name implies.

~~~
text-shadow: <offset-x> <offset-y> <blur-radius> <color>
~~~

Example:

~~~
h1 {
  text-shadow: 1px 2px 2px blue;
}
~~~

## Box Sizing
Box sizing is used to change default CSS box model, which used to calculate widths and heights of given element.

**Box model:**

- Box model references the design and layout of given HTML elements.
- Each HTML element is a box consisting padding, borders, margins and its content.
- The box model refers to how these properties are calculated in conjuction with one another in order to set the element's dimensions.

**Box model refresher:** not include margins anymore because the margin isn't a part of the width.

Example:

~~~
.box {
  border: 2px solid black;
  margin: 20px;
  padding: 10px;
  width: 300px;
}
// => size of the box: 300 + 20 + 4 = 324
~~~

Three values of box-sizing:

- *content-box:* default value. The width and height are measured by including only the content, but not the border, margin, or padding.
- *padding-box:* include padding, not the border or margin.
- *border-box:* in clude padding, border, not the margin.

Example usage of padding-box:

~~~
.box {
  box-sizing: padding-box;
  border: 2px solid black;
  margin: 20px;
  padding: 10px;
  width: 300px; // included padding already, so the content is reduced to 280px
}
// => size of the box is 300(width) + 4(border) = 304
~~~

Example usage of border-box:

~~~
.box {
  box-sizing: border-box;
  border: 2px solid black;
  margin: 20px;
  padding: 10px;
  width: 300px; // included padding and border already, so the content is reduced to 276px
}
// => size of the box is 300
~~~

## Multiple Backgrounds

CSS3 allows you to apply multiple background on an element. They are stacked in the order in which you specify them.

~~~
.element {
  background-image: url(bg1.jpg), url(bg2.jpg);
  background-position: top left, center right;
  background-repeat: no-repeat, no-repeat;
}
~~~

Shorthand:

~~~
.element {
  background:
    url(bg1.jpg) top left no-repeat,
    url(bg2.jpg) top right no-repeat;
}
~~~

## Color

- RGBa: represents red, green, blue colors and the opacity of the color.
- HSLa: represents the hue, saturation, lightness and opacity of the color.

Example:

~~~
.element {
  color: rgba(0, 0, 0, 0.75);
}

.tagline {
  color: hsla(0, 0%, 100%, 0.65);
}

~~~

## Opacity

The opacity is the transparency of an element.

~~~
.element {
  opacity: 0.45; // means 45% opaque
}
~~~

## Gradients

CSS3 provides the ability to create gradients, smooth transitions between two or more colors.

- Linear gradient: need to specify: starting point, ending point, optional stop-color points.
- Radial gradient: creates a gradient that extends from an origin, the center of the element, extending outward in a circular or elliptical shape.

The radial gradient consists of:

- The center
- The ending shape contour and position
- Color stops

Linear Gradient Recipe:

~~~
linear-gradient(<angle> to <side-or-corner>, <color-stop>s);
~~~

- *angle:* optional, is generally a degree (e.g. 45deg).
- *side-or-cornor:* optional, consists two keywords: left or right and top or bottom.
- *color-stop:* consists of a color and an optional stop position, which can be either the percentage or length.
- *angle* and *side-or-corner* instead each others.

Example of usage Linear gradient

~~~
.element {
  background: linear-gradient(to bottom, red, yellow);
  // no angle value
  // to top = 0deg
  // to bottom = 180deg
  // to right = 270deg
  // to left = 90deg
}

.nav {
  background: linear-gradient(#3e606f, #324d59);
}
~~~

Radial Gradient Recipe:

~~~
radial-gradient(<shape> <size> at <position>, <color-stop>s);
~~~

- *shape* or *size:* optional, specify the shape or size of the gradient
  - *shape* can be circle or ellipsis (default).
  - *size*  can be a keyword in which "closest-side, closest-cornor, fasthest-side, fasthest-cornor (default)". The size can be a length or percentage.
- *position:* optional, same as the background-position. Default is center.
- *color-stop:* consists of a color and an optional stop position, which can be either the percentage or length.
- *shape* and *size* instead each others.

Example of usage Radial gradient

~~~
.element {
  background: radius-gradient(circle at top left, aqua, blue);
  // Because of shape appearance, size will be omit.
}
~~~

# Fonts & Interactions

## Font Face

Using @font-face, we have abitily to provide online fonts for use on our websites.

Example:

~~~
@font-face {
  font-family: "OpenSansRegular";
  src: url('OpenSansRegular.eot');
  font-style: normal;
  font-weight: normal;
}
~~~

Using @font-face in our stylesheet:

~~~
h1 {
  font-family: 'OpenSansRegular';
  // We specify font-family as the same one established in the @font-face call.
}
~~~

Using @font-face in our stylesheet with fallback fonts:

~~~
h1 {
  font-family: 'OpenSansRegular', Helventica, Arial, san-serif;
  // We specify font-family as the same one established in the @font-face call.
  // Specifies fallback fonts if chief font isn't supported
}
~~~

Using varying weights with @font-face:

~~~
@font-face {
  font-family: "OpenSansBold";
  src: url('OpenSansBold.eot');
  font-style: normal;
  font-weight: normal;
}

h1 {
  font-family: 'OpenSansBold';
}
~~~

We can alter @font-face call in order to use font-style and font-weight properties as usual.

~~~
@font-face {
  font-family: "OpenSansRegular";
  src: url('OpenSansBold.eot');
  font-style: normal;
  font-weight: bold;
}

h1 {
  font-weight: bold;
}
~~~

## Transforms

Using transform property in CSS3, we can translate, rotate, scale, skew element in CSS.

### Translate

You can create 2D transition using transform:

~~~
.element {
  transform: translate(20px, 30px);
  // Translate element 20px to the right
  // Translate element 30px down.
}
~~~

Recipe: 

~~~
translate(<tx> <ty>);
// tx: x-axis, can be a length or percentage, if not specified, the value is 0
// ty: y-axis, can be a length or percentage, if not specified, the value is 0
~~~

Moreover, you can use translateX or translateY to translate the x and y value individually:

~~~
.element {
  transform: translateX(20px);
  transform: translateY(30px);
}
~~~

### Rotate 

You can rotate an element clockwise around its origin by specified angle.

~~~
.element {
  transform: rotate(45deg);
}
~~~

### Scale

With scale, you can scale an element by specified unitless number.

Example:

~~~
.element {
  transform: scale(1.2);
}
~~~

Recipe:

~~~
scale(<sx>, <sy>);
// <sx> and <sy> are unitless number for the x-axis and y-axis respectively.
// If <sy> does not specify, it default to the value of <sx>.

// You can also scale X and Y axis individually by:
scaleX(<sx>);
scaleY(<sy>);
~~~

### Skew

With Skew, an element skewed around the x or y axis by the angle specified.

Example:

~~~
.element {
  transform: skewX(-25deg);
}
~~~

Recipe:

~~~
// With the same specified element, you only skew by X or Y axis, not both.
skewX(<sx>);
skewY(<sy>);
~~~

## Transitions

CCS3 provides transitions, which allow you to transition between two states of a specified element.

~~~
.element {
  background-color: black;
  transition: background-color 0.2s ease-in-out;
}

.element:hover {
  background-color: blue;
}
~~~

Recipe:

~~~
transition: <property> <duration> <timing-function> <delay>

- <property>: The property you want to transition
- <duration>: The amount of time that you want the transition to take place
- <timing-function>: The timing of the transition itself
  - ease
  - ease-in
  - ease-in-out
  - linear
  - cubic-bezier
  - step-start
  - step-end
  - steps()
- <delay>: Time to wait between the change
~~~

You can set the transition values individually, as well:

~~~
.element {
  transition-property: background-color;
  transition-duration: 0.2s;
  transition-timing-function: ease-in-out;
  transition-delay: 0.1s;
}
~~~

Example usage of transition using the all property:

~~~
.element {
  background-color: black;
  color: white;
  transition: all 0.2s ease-in-out;
}

.element:hover {
  background-color: gray;
  color: black;
}
~~~

## Progressive Enhancement

The term "progressive enhancement" refers to the use of newer features that add to the experience in modern browsers that support those features, but doesn't detract (làm giảm) from the experience in older browsers.

Example:

~~~
.element {
  backgroud: #ccc;
  border-radius: 10px;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.75);
}
~~~

If browsers support border-radius and box-shadow, your element will look good, unless, it is quite terrible but still usable. So, progressive enhancement is important to keep in mind because we want to make sure that we're creating experiences that degrate (làm giảm) gracefully for browsers that don't support a lot of features we've covered.